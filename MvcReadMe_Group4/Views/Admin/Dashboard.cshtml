@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .dashboard-container {
        padding: 10px 15px;
    }

    .main-grid {
        display: grid;
        grid-template-columns: 75% 23%;
        gap: 20px;
    }

    .left-column {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 12px;
    }

    .stat-card {
        background-color: #1a2029;
        border-radius: 11px;
        padding: 14px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        transition: transform 0.2s ease;
    }

        .stat-card:hover {
            transform: translateY(-5px);
        }

    .stat-icon {
        width: 40px;
        height: 40px;
        border-radius: 9px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 9px;
        font-size: 20px;
    }

        .stat-icon.users {
            background-color: #359b9f33;
            color: #359b9f;
        }

        .stat-icon.books {
            background-color: #c27a1d33;
            color: #c27a1d;
        }

        .stat-icon.reads {
            background-color: #19755033;
            color: #197550;
        }

    .stat-value {
        font-size: 24px;
        font-weight: bold;
        color: #ffffff;
        margin-bottom: 5px;
    }

    .stat-label {
        color: #c9d1d9;
        font-size: 13px;
    }

    .chart-container {
        background-color: #1a2029;
        border-radius: 11px;
        padding: 14px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        height: 320px;
        margin-bottom: 40px;
    }

    .pie-chart-container {
        background-color: #1a2029;
        border-radius: 11px;
        padding: 14px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        display: flex;
        flex-direction: column;
        height: 47vh;
    }

    .chart-wrapper {
        flex: 1;
        min-height: 0;
        margin-bottom: 14px;
        padding: 9px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chart-wrapper canvas {
        max-width: 90%;
        max-height: 90%;
    }

    .section-title {
        color: #c9d1d9;
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 14px;
        padding-bottom: 7px;
        border-bottom: 1px solid #2d3748;
    }

    .legend-container {
        margin-top: auto;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 7px 14px;
        padding: 0 9px 9px 9px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        color: #c9d1d9;
        font-size: 13px;
        margin-bottom: 0;
    }

    .legend-color {
        width: 9px;
        height: 9px;
        border-radius: 50%;
        margin-right: 7px;
        flex-shrink: 0;
    }

    .popular-books-section {
        margin-top: 17px;
    }

    .popular-books-title {
        color: #c9d1d9;
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 14px;
        padding-bottom: 7px;
        border-bottom: 1px solid #2d3748;
    }

    .popular-books-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 17px;
        padding: 6px 0;
    }

    .book-cover {
        width: 75%;
        aspect-ratio: 2/3;
        object-fit: cover;
        border-radius: 7px;
        transition: transform 0.2s ease, filter 0.2s ease;
        margin: 0 auto;
        display: block;
        filter: brightness(0.9);
    }

        .book-cover:hover {
            transform: translateY(-5px);
            filter: brightness(1);
        }

    @@media (max-width: 1024px) {
        .main-grid {
            grid-template-columns: 1fr;
        }

        .popular-books-grid {
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
        }
    }
</style>

<div class="dashboard-container">
    <div class="main-grid">
        <div class="left-column">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-icon users">
                        <i class="bi bi-people"></i>
                    </div>
                    <div class="stat-value">@ViewBag.TotalUsers</div>
                    <div class="stat-label">Total Users</div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon books">
                        <i class="bi bi-book"></i>
                    </div>
                    <div class="stat-value">@ViewBag.TotalBooks</div>
                    <div class="stat-label">Total Books</div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon reads">
                        <i class="bi bi-bookmark-check"></i>
                    </div>
                    <div class="stat-value">@ViewBag.TotalReads</div>
                    <div class="stat-label">Total Reads</div>
                </div>
            </div>

            <div class="chart-container">
                <div class="section-title">Daily Reads (Past Week)</div>
                <canvas id="dailyReadsChart"></canvas>
            </div>
        </div>

        <div class="right-column">
            <div class="pie-chart-container">
                <div class="section-title">Book Categories</div>
                <div class="chart-wrapper">
                    <canvas id="categoryPieChart"></canvas>
                </div>
                <div class="legend-container">
                    @foreach (var category in ViewBag.CategoryDistribution)
                    {
                        <div class="legend-item">
                            <div class="legend-color" style="background-color: @GetCategoryColor(category.Category)"></div>
                            <span>@category.Category (@category.Count)</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="popular-books-section">
        <div class="popular-books-title">Most Popular Books</div>
        <div class="popular-books-grid">
            @foreach (var book in ViewBag.PopularBooks)
            {
                <img src="@book.CoverImagePath" alt="@book.Title" class="book-cover" title="@book.Title - @book.NumberOfReads reads">
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let dailyReadsChart;
        let categoryPieChart;

        // Function to refresh dashboard data
        async function refreshDashboardData() {
            try {
                const response = await fetch('/Admin/GetDashboardData');
                if (!response.ok) throw new Error('Failed to fetch dashboard data');
                const data = await response.json();
                
                // Update statistics
                document.querySelector('.stat-value:nth-child(1)').textContent = data.totalUsers;
                document.querySelector('.stat-value:nth-child(2)').textContent = data.totalBooks;
                document.querySelector('.stat-value:nth-child(3)').textContent = data.totalReads;

                // Update daily reads chart
                dailyReadsChart.data.labels = data.dailyReads.map(d => new Date(d.date).toLocaleDateString('en-US', { weekday: 'short' }));
                dailyReadsChart.data.datasets[0].data = data.dailyReads.map(d => d.count);
                dailyReadsChart.update();

                // Update category distribution
                categoryPieChart.data.labels = data.categoryDistribution.map(c => c.category);
                categoryPieChart.data.datasets[0].data = data.categoryDistribution.map(c => c.count);
                categoryPieChart.update();

                // Update popular books
                const popularBooksGrid = document.querySelector('.popular-books-grid');
                popularBooksGrid.innerHTML = data.popularBooks.map(book => 
                    `<img src="${book.coverImagePath}" alt="${book.title}" class="book-cover" title="${book.title} - ${book.numberOfReads} reads">`
                ).join('');
            } catch (error) {
                console.error('Error refreshing dashboard:', error);
            }
        }

        // Daily Reads Chart
        const dailyReadsCtx = document.getElementById('dailyReadsChart').getContext('2d');
        const dailyReadsData = @Html.Raw(Json.Serialize(ViewBag.DailyReads));

        // Create gradient for the fill
        const gradient = dailyReadsCtx.createLinearGradient(0, 0, 0, 400);
        gradient.addColorStop(0, 'rgba(53, 155, 159, 0.2)');
        gradient.addColorStop(1, 'rgba(53, 155, 159, 0)');

        dailyReadsChart = new Chart(dailyReadsCtx, {
            type: 'line',
            data: {
                labels: dailyReadsData.map(d => new Date(d.date).toLocaleDateString('en-US', { weekday: 'short' })),
                datasets: [{
                    label: 'Daily Reads',
                    data: dailyReadsData.map(d => d.count),
                    borderColor: '#359b9f',
                    borderWidth: 3,
                    backgroundColor: gradient,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: '#359b9f',
                    pointBorderColor: '#ffffff',
                    pointBorderWidth: 2,
                    pointRadius: 6,
                    pointHoverRadius: 8,
                    pointHoverBackgroundColor: '#359b9f',
                    pointHoverBorderColor: '#ffffff',
                    pointHoverBorderWidth: 2,
                    pointStyle: 'circle'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: '#1a2029',
                        titleColor: '#ffffff',
                        bodyColor: '#c9d1d9',
                        borderColor: '#2d3748',
                        borderWidth: 1,
                        padding: 12,
                        cornerRadius: 8,
                        displayColors: false,
                        callbacks: {
                            label: function(context) {
                                return `Reads: ${context.raw}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: '#2d3748',
                            drawBorder: false,
                            lineWidth: 1
                        },
                        ticks: {
                            color: '#8b949e',
                            stepSize: 5,
                            font: {
                                size: 11
                            },
                            padding: 10
                        },
                        border: {
                            display: false
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: '#8b949e',
                            font: {
                                size: 11
                            },
                            padding: 10
                        },
                        border: {
                            display: false
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeOutQuart'
                }
            }
        });

        // Category Distribution Pie Chart
        const categoryCtx = document.getElementById('categoryPieChart').getContext('2d');
        const categoryData = @Html.Raw(Json.Serialize(ViewBag.CategoryDistribution));
        
        categoryPieChart = new Chart(categoryCtx, {
            type: 'doughnut',
            data: {
                labels: categoryData.map(c => c.category),
                datasets: [{
                    data: categoryData.map(c => c.count),
                    backgroundColor: categoryData.map(c => getCategoryColor(c.category)),
                    borderWidth: 0,
                    borderRadius: 5,
                    hoverOffset: 15,
                    hoverBorderWidth: 0,
                    spacing: 3
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: '#1a2029',
                        titleColor: '#ffffff',
                        bodyColor: '#c9d1d9',
                        borderColor: '#2d3748',
                        borderWidth: 1,
                        padding: 12,
                        cornerRadius: 8,
                        displayColors: true,
                        boxPadding: 6,
                        usePointStyle: true,
                        callbacks: {
                            label: function(context) {
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((context.raw / total) * 100);
                                return `${context.label}: ${context.raw} (${percentage}%)`;
                            }
                        }
                    }
                },
                cutout: '60%',
                animation: {
                    animateScale: true,
                    animateRotate: true,
                    duration: 1000,
                    easing: 'easeOutQuart'
                }
            }
        });

        // Set up auto-refresh every 5 seconds
        setInterval(refreshDashboardData, 5000);

        function getCategoryColor(category) {
            const colors = {
                'Programming': 'rgba(143, 211, 213, 1)',
                'Science': 'rgba(230, 177, 122, 1)',
                'Philosophy': 'rgba(143, 211, 160, 1)',
                'Self-Help': 'rgba(230, 126, 126, 1)'
            };
            return colors[category] || 'rgba(160, 174, 192, 1)';
        }
    </script>
}

@functions {
    public string GetCategoryColor(string category)
    {
        var colors = new Dictionary<string, string>
        {
            { "Programming", "rgba(143, 211, 213, 1)" },
            { "Science", "rgba(230, 177, 122, 1)" },
            { "Philosophy", "rgba(143, 211, 160, 1)" },
            { "Self-Help", "rgba(230, 126, 126, 1)" }
        };
        return colors.ContainsKey(category) ? colors[category] : "rgba(160, 174, 192, 1)";
    }
}

