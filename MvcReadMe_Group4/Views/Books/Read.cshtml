@model MvcReadMe_Group4.Models.Book
@{
    ViewData["Title"] = Model.Title;
    Layout = "../Shared/_Layout.cshtml";
}

<style>
    body {
        margin: 0;
        padding: 0;
    }

    .book-reader {
        height: 90vh;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        margin-top: -50px;
    }

    .page-spread {
        display: flex;
        gap: 5px;
        position: relative;
        perspective: 2000px;
    }

    .page {
        background: white;
        position: relative;
    }

    .page.right {
        transform-origin: left center;
        transition: transform 1.2s cubic-bezier(0.645, 0.045, 0.355, 1);
        backface-visibility: hidden;
        z-index: 2;
    }

    .page.right.flipping {
        transform: rotateY(-180deg);
    }

    .page.right .page-back {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: white;
        transform: rotateY(180deg);
        backface-visibility: hidden;
    }

    .next-spread {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        gap: 5px;
        z-index: 1;
        opacity: 0.3;
    }

    .page canvas {
        display: block;
    }

    .nav-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: none;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        font-size: 24px;
        cursor: pointer;
        transition: background 0.2s;
        z-index: 1000;
    }

    .nav-btn:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .nav-btn.prev {
        left: 20px;
    }

    .nav-btn.next {
        right: 20px;
    }

    .page-info {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        color: white;
        background: rgba(0, 0, 0, 0.5);
        padding: 8px 16px;
        border-radius: 20px;
    }
</style>

<div class="book-reader">
    <button class="nav-btn prev" id="prev-page">&lt;</button>
    <div id="page-spread" class="page-spread"></div>
    <button class="nav-btn next" id="next-page">&gt;</button>
    <div class="page-info">
        Page <span id="current-page">1</span> of <span id="total-pages">0</span>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script>
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

        let pdfDoc = null;
        let currentPage = 1;
        let totalPages = 0;
        const pageSpread = document.getElementById('page-spread');
        const scale = 1.12;

        async function loadPDF() {
            try {
                const loadingTask = pdfjsLib.getDocument('@Model.FilePath');
                pdfDoc = await loadingTask.promise;
                totalPages = Math.min(6, pdfDoc.numPages);
                document.getElementById('total-pages').textContent = totalPages;
                renderPages(currentPage);
            } catch (error) {
                console.error('Error loading PDF:', error);
                pageSpread.innerHTML = '<div style="color: white; padding: 20px;">Error loading PDF</div>';
            }
        }

        async function renderPages(startPage) {
            pageSpread.innerHTML = '';
            
            // Show/hide navigation buttons based on current page
            const prevButton = document.getElementById('prev-page');
            const nextButton = document.getElementById('next-page');
            
            prevButton.style.display = startPage <= 1 ? 'none' : 'block';
            nextButton.style.display = startPage + 1 >= totalPages ? 'none' : 'block';
            
            // Render first page
            const page1 = await pdfDoc.getPage(startPage);
            const viewport1 = page1.getViewport({ scale });
            const canvas1 = document.createElement('canvas');
            const context1 = canvas1.getContext('2d');
            canvas1.width = viewport1.width;
            canvas1.height = viewport1.height;

            const pageDiv1 = document.createElement('div');
            pageDiv1.className = 'page';
            pageDiv1.appendChild(canvas1);
            pageSpread.appendChild(pageDiv1);

            await page1.render({
                canvasContext: context1,
                viewport: viewport1
            }).promise;

            // Render second page if it exists
            if (startPage + 1 <= totalPages) {
                const page2 = await pdfDoc.getPage(startPage + 1);
                const viewport2 = page2.getViewport({ scale });
                const canvas2 = document.createElement('canvas');
                const context2 = canvas2.getContext('2d');
                canvas2.width = viewport2.width;
                canvas2.height = viewport2.height;

                const pageDiv2 = document.createElement('div');
                pageDiv2.className = 'page right';
                pageDiv2.appendChild(canvas2);

                // Create back of the page
                const pageBack = document.createElement('div');
                pageBack.className = 'page-back';
                if (startPage + 2 <= totalPages) {
                    const nextPage = await pdfDoc.getPage(startPage + 2);
                    const nextViewport = nextPage.getViewport({ scale });
                    const nextCanvas = document.createElement('canvas');
                    const nextContext = nextCanvas.getContext('2d');
                    nextCanvas.width = nextViewport.width;
                    nextCanvas.height = nextViewport.height;
                    pageBack.appendChild(nextCanvas);
                    await nextPage.render({
                        canvasContext: nextContext,
                        viewport: nextViewport
                    }).promise;
                }
                pageDiv2.appendChild(pageBack);
                pageSpread.appendChild(pageDiv2);

                await page2.render({
                    canvasContext: context2,
                    viewport: viewport2
                }).promise;
            }

            document.getElementById('current-page').textContent = startPage;
        }

        async function flipPage(direction) {
            const rightPage = document.querySelector('.page.right');
            if (rightPage) {
                rightPage.classList.add('flipping');
                await new Promise(resolve => setTimeout(resolve, 600));
            }

            if (direction === 'next' && currentPage + 2 <= totalPages) {
                currentPage += 2;
            } else if (direction === 'prev' && currentPage > 1) {
                currentPage -= 2;
                if (currentPage < 1) currentPage = 1;
            }

            await renderPages(currentPage);
        }

        document.getElementById('prev-page').addEventListener('click', () => flipPage('prev'));
        document.getElementById('next-page').addEventListener('click', () => flipPage('next'));

        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                flipPage('prev');
            } else if (e.key === 'ArrowRight') {
                flipPage('next');
            }
        });

        document.addEventListener('DOMContentLoaded', loadPDF);
    </script>
} 