@model MvcReadMe_Group4.Models.Book
@{
    ViewData["Title"] = Model.Title;
    Layout = "../Shared/_Layout.cshtml";
}

<style>
    body {
        margin: 0;
        padding: 0;
    }

    .book-reader {
        height: 88vh;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        margin-top: -50px;
    }

    .page-spread {
        display: flex;
        gap: 5px;
        position: relative;
        background: #515f70;
        perspective: 2000px;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 8px 16px rgba(88, 166, 255, 0.3);
        transform: translateY(-4px);
        transform-origin: center center;
        transition: transform 0.3s ease;
    }

    .page-spread::before {
        content: '';
        position: absolute;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 20px;
        height: 100%;
            background: linear-gradient( to right, #359b9f 0%, rgba(41, 117, 120, 0.8) 20%, #359b9f 40%, rgba(41, 117, 120, 0.8) 60%, #359b9f 80%, rgba(41, 117, 120, 0.8) 100% );
            border-radius: 2px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        z-index: 1;
    }

    .page-container {
        display: flex;
        gap: 5px;
        position: relative;
        z-index: 2;
    }

    .page {
        background: white;
        position: relative;
        box-shadow: 
            -8px 0 20px rgba(0, 0, 0, 0.15),
            0 0 10px rgba(0, 0, 0, 0.1);
        z-index: 2;
    }

    .left-page {
        position: relative;
        transform-origin: right center;
        /* transition: transform 0.6s cubic-bezier(0.645, 0.045, 0.355, 1); */
        transition: transform 0.6s cubic-bezier(0.7, 0, 1, 1);
        transform-style: preserve-3d;
    }

    .right-page {
        position: relative;
        transform-origin: left center;
        /* transition: transform 0.6s cubic-bezier(0.645, 0.045, 0.355, 1); */
        transition: transform 0.6s cubic-bezier(0.7, 0, 1, 1);
        transform-style: preserve-3d;
    }

    .left-page.flipping {
        transform: rotateY(180deg);
    }

    .right-page.flipping {
        transform: rotateY(-180deg);
    }

    .left-page::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to left, rgba(0,0,0,0.25), rgba(0,0,0,0));
        opacity: 0.35;
        pointer-events: none;
        z-index: 2;
    }

    .right-page::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to right, rgba(0,0,0,0.25), rgba(0,0,0,0));
        opacity: 0.35;
        pointer-events: none;
        z-index: 2;
    }

    .left-page .page-back {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: white;
        transform: rotateY(180deg);
        backface-visibility: hidden;
        transform-style: preserve-3d;
        box-shadow: 8px 0 20px rgba(0, 0, 0, 0.15);
    }

    .right-page .page-back {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: white;
        transform: rotateY(180deg);
        backface-visibility: hidden;
        transform-style: preserve-3d;
        box-shadow: -8px 0 20px rgba(0, 0, 0, 0.15);
    }

    .static-page {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: white;
        box-shadow: 
            -8px 0 20px rgba(0, 0, 0, 0.15),
            0 0 10px rgba(0, 0, 0, 0.1);
        z-index: 1;
    }

    .static-page.left {
        position: relative;
        transform-origin: right center;
    }

    .static-page.right {
        position: relative;
        transform-origin: left center;
    }

    .static-page.left {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
            background: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.20), rgba(0, 0, 0, 0.20), rgba(0, 0, 0, 0));
        opacity: 0.35;
        pointer-events: none;
        z-index: 2;
    }

    .static-page.right {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
            background: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.20), rgba(0, 0, 0, 0.20), rgba(0, 0, 0, 0));
        opacity: 0.35;
        pointer-events: none;
        z-index: 2;
    }

    .page canvas {
        display: block;
        backface-visibility: hidden;
    }

    .nav-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: none;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        font-size: 24px;
        cursor: pointer;
        z-index: 1000;
    }

    .nav-btn:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .nav-btn.prev {
        left: 20px;
    }

    .nav-btn.next {
        right: 20px;
    }

    .page-info {
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        color: white;
        background: rgba(0, 0, 0, 0.5);
        padding: 8px 16px;
        border-radius: 20px;
    }

    .back-btn {
        position: absolute;
        top: 20px;
        left: 20px;
        background: rgba(81, 95, 112, 0.4);
        color: rgba(255, 255, 255, 0.8);
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(4px);
    }

    .back-btn:hover {
        background: rgba(81, 95, 112, 0.6);
        color: rgba(255, 255, 255, 1);
        transform: translateY(-1px);
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
    }

    .back-btn i {
        font-size: 16px;
        margin-right: 6px;
    }
</style>

<div class="book-reader">
    <a href="#" class="back-btn" title="Close Tab" onclick="window.close(); return false;">
        <i class="fas fa-arrow-left"></i>
    </a>
    <button class="nav-btn prev" id="prev-page">&lt;</button>
    <div id="page-spread" class="page-spread">
        <div id="container-1" class="page-container"></div>
        <div id="container-2" class="page-container" style="display: none;"></div>
    </div>
    <button class="nav-btn next" id="next-page">&gt;</button>
    <div class="page-info">
        Page <span id="current-page">1</span> of <span id="total-pages">0</span>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script>
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

        let pdfDoc = null;
        let currentPage = 1;
        let totalPages = 0;
        const pageSpread = document.getElementById('page-spread');
        const container1 = document.getElementById('container-1');
        const container2 = document.getElementById('container-2');
        const scale = 1.12;
        let isRendering = false;
        let activeContainer = container1;
        let inactiveContainer = container2;

        async function checkAndScalePDF() {
            try {
                const page = await pdfDoc.getPage(2); // Check first content page
                const viewport = page.getViewport({ scale: 1.0 }); // Get original size
                const containerHeight = window.innerHeight * 0.88; // 88vh
                
                if (viewport.height > containerHeight) {
                    const scaleFactor = 0.8;
                    pageSpread.style.transform = `translateY(-4px) scale(${scaleFactor})`;
                } else {
                    pageSpread.style.transform = 'translateY(-4px) scale(1)';
                }
            } catch (error) {
                console.error('Error checking PDF size:', error);
            }
        }

        async function loadPDF() {
            try {
                const loadingTask = pdfjsLib.getDocument('@Model.FilePath');
                pdfDoc = await loadingTask.promise;
                totalPages = pdfDoc.numPages;
                document.getElementById('total-pages').textContent = totalPages - 1;
                await renderPages(currentPage);
                // Check container size after first render
                setTimeout(checkAndScaleContainer, 100);
            } catch (error) {
                console.error('Error loading PDF:', error);
                pageSpread.innerHTML = '<div style="color: white; padding: 20px;">Error loading PDF</div>';
            }
        }

        function checkAndScaleContainer() {
            const screenHeight = window.innerHeight;
            const containerHeight = pageSpread.offsetHeight;
            
            if (containerHeight > screenHeight * 0.8) {
                pageSpread.style.transform = 'translateY(-4px) scale(0.8)';
            } else {
                pageSpread.style.transform = 'translateY(-4px) scale(1)';
            }
        }

        // Add window resize handler to recheck scaling
        window.addEventListener('resize', () => {
            setTimeout(checkAndScaleContainer, 100);
        });

        async function renderPages(startPage) {
            if (isRendering) return;
            isRendering = true;

            try {
                // Show/hide navigation buttons based on current page
                document.getElementById('prev-page').style.display = startPage <= 2 ? 'none' : 'block';
                document.getElementById('next-page').style.display = startPage + 1 >= totalPages ? 'none' : 'block';

                // Clear the inactive container
                inactiveContainer.innerHTML = '';

                // Add static pages first
                const staticLeftPage = document.createElement('div');
                staticLeftPage.className = 'static-page left';
                const staticRightPage = document.createElement('div');
                staticRightPage.className = 'static-page';
                
                inactiveContainer.appendChild(staticLeftPage);
                inactiveContainer.appendChild(staticRightPage);

                // Create page containers
                const leftPageDiv = document.createElement('div');
                leftPageDiv.className = 'page left-page';
                const rightPageDiv = document.createElement('div');
                rightPageDiv.className = 'page right-page';

                // Add containers to inactive container
                inactiveContainer.appendChild(leftPageDiv);
                inactiveContainer.appendChild(rightPageDiv);

                // Render first page
                const page1 = await pdfDoc.getPage(startPage);
                const viewport1 = page1.getViewport({ scale });
                const canvas1 = document.createElement('canvas');
                const context1 = canvas1.getContext('2d');
                canvas1.width = viewport1.width;
                canvas1.height = viewport1.height;
                leftPageDiv.appendChild(canvas1);

                await page1.render({
                    canvasContext: context1,
                    viewport: viewport1
                }).promise;

                // Render second page if it exists
                if (startPage + 1 <= totalPages) {
                    const page2 = await pdfDoc.getPage(startPage + 1);
                    const viewport2 = page2.getViewport({ scale });
                    const canvas2 = document.createElement('canvas');
                    const context2 = canvas2.getContext('2d');
                    canvas2.width = viewport2.width;
                    canvas2.height = viewport2.height;
                    rightPageDiv.appendChild(canvas2);

                    await page2.render({
                        canvasContext: context2,
                        viewport: viewport2
                    }).promise;

                    // Create back of the page with next left page
                    if (startPage + 2 <= totalPages) {
                        const pageBack = document.createElement('div');
                        pageBack.className = 'page-back';
                        const nextPage = await pdfDoc.getPage(startPage + 2);
                        const nextViewport = nextPage.getViewport({ scale });
                        const nextCanvas = document.createElement('canvas');
                        const nextContext = nextCanvas.getContext('2d');
                        nextCanvas.width = nextViewport.width;
                        nextCanvas.height = nextViewport.height;
                        pageBack.appendChild(nextCanvas);
                        rightPageDiv.appendChild(pageBack);

                        await nextPage.render({
                            canvasContext: nextContext,
                            viewport: nextViewport
                        }).promise;
                    }
                }

                // Swap containers
                activeContainer.style.display = 'none';
                inactiveContainer.style.display = 'flex';
                [activeContainer, inactiveContainer] = [inactiveContainer, activeContainer];

                document.getElementById('current-page').textContent = startPage - 1;
            } finally {
                isRendering = false;
            }
        }

        async function changePage(direction) {
            if (isRendering) return;
            
            if (direction === 'next' && currentPage + 2 <= totalPages) {
                const rightPage = activeContainer.querySelector('.page.right-page');
                if (rightPage) {
                    rightPage.classList.add('flipping');
                    await new Promise(resolve => setTimeout(resolve, 600));
                    rightPage.classList.remove('flipping');
                }
                currentPage += 2;
            } else if (direction === 'prev' && currentPage > 2) {
                currentPage -= 2;
                if (currentPage < 2) {
                    currentPage = 2;
                }
            }
            await renderPages(currentPage);
        }

        document.getElementById('prev-page').addEventListener('click', () => changePage('prev'));
        document.getElementById('next-page').addEventListener('click', () => changePage('next'));

        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                changePage('prev');
            } else if (e.key === 'ArrowRight') {
                changePage('next');
            }
        });

        document.addEventListener('DOMContentLoaded', loadPDF);
    </script>
} 
